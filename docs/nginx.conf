user  www;
worker_processes  1;
worker_rlimit_nofile 1024;

events {
    worker_connections  800;
}

error_log  logs/error.log;
pid        logs/nginx.pid;

http {
    # JSON logging
    log_format json_access escape=json '{'
    '"timestamp":"$time_iso8601",'
    '"remote_addr":"$remote_addr",'
    '"method":"$request_method",'
    '"uri":"$request_uri",'
    '"status":$status,'
    '"body_bytes_sent":$body_bytes_sent,'
    '"request_time":$request_time,'
    '"http_referrer":"$http_referer",'
    '"http_user_agent":"$http_user_agent",'
    '"http_host":"$http_host",'
    '"upstream_addr":"$upstream_addr"'
    '}';

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/m;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Cookie-based verification check
    map $cookie_altcha_verified $challenge_bypass {
        "true" 1;
        default 0;
    }

    upstream dataspace {
        server 1.2.0.2:81;
    }

    upstream oar {
        server 1.2.0.3:81;
    }

    upstream altcha_server {
        server 127.0.0.1:8080;
    }

    # HTTP redirects
    server {
        listen 80;
        server_name dataspace.princeton.edu oar.princeton.edu;
        access_log logs/access.log json_access;
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # Protected dataspace server
    server {
        listen 443 ssl;
        server_name dataspace.princeton.edu;
        ssl_certificate            /etc/ssl/dataspace.princeton.edu.chained.pem;
        ssl_certificate_key        /etc/ssl/private/dataspace.princeton.edu.key;
        ssl_session_cache          shared:SSL:1m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        client_max_body_size 100M;

        access_log logs/dataspace.access.log json_access;
        error_log  logs/dataspace.error.log;

        limit_conn conn_limit_per_ip 15;

        # ALTCHA verification endpoint - rewrite path
        location /verify {
            # Strip /verify and pass to ALTCHA server root
            rewrite ^/verify(.*)$ /$1 break;
            proxy_pass http://altcha_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ALTCHA API endpoints
        location /api/ {
            proxy_pass http://altcha_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Main content - protected
        location / {
            # Redirect to verification if no valid cookie
            if ($challenge_bypass = 0) {
                return 302 https://$server_name/verify?return_to=https://$server_name$request_uri;
            }

            limit_req zone=general burst=10 nodelay;

            proxy_pass http://dataspace;
            proxy_buffering on;
            proxy_busy_buffers_size   512k;
            proxy_buffers   4 512k;
            proxy_buffer_size   256k;
            proxy_http_version 1.1;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }

    # Protected OAR server
    server {
        listen 443 ssl;
        server_name oar.princeton.edu;
        ssl_certificate            /etc/ssl/oar.princeton.edu.chained.pem;
        ssl_certificate_key        /etc/ssl/private/oar.princeton.edu.key;
        ssl_session_cache          shared:SSL:1m;
        ssl_prefer_server_ciphers  off;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        client_max_body_size 100M;

        access_log logs/oar.access.log json_access;
        error_log  logs/oar.error.log;

        limit_conn conn_limit_per_ip 15;

        # ALTCHA verification endpoint - rewrite path
        location /verify {
            # Strip /verify and pass to ALTCHA server root
            rewrite ^/verify(.*)$ /$1 break;
            proxy_pass http://altcha_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ALTCHA API endpoints
        location /api/ {
            proxy_pass http://altcha_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Main content - protected
        location / {
            # Redirect to verification if no valid cookie
            if ($challenge_bypass = 0) {
                return 302 https://$server_name/verify?return_to=https://$server_name$request_uri;
            }

            limit_req zone=general burst=10 nodelay;

            proxy_pass http://oar;
            proxy_buffering on;
            proxy_busy_buffers_size   512k;
            proxy_buffers   4 512k;
            proxy_buffer_size   256k;
            proxy_http_version 1.1;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}
